{"version":3,"sources":["components/ChatMessage.js","App.js","index.js"],"names":["ChatMessage","props","className","key","id","name","text","InfoMessage","SendForm","useState","newMessage","setNewMessage","onSubmit","event","preventDefault","submitAction","value","onChange","target","ChatMessageList","messages","map","message","type","prompt","test","App","io","setMessages","messagesRef","useRef","current","addNewMessage","useEffect","emit","on","data","socketIO","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAEMA,G,MAAc,SAACC,GACnB,OACE,yBAAKC,UAAU,eAAeC,IAAKF,EAAMG,IACvC,uBAAGF,UAAU,qBAAb,UAAqCD,EAAMI,KAA3C,MACA,uBAAGH,UAAU,qBAAb,cAAyCD,EAAMK,UAK/CC,EAAc,SAACN,GACnB,OACE,yBAAKC,UAAU,gBACb,2BAAID,EAAMK,QAKVE,EAAW,SAACP,GAAW,IAAD,EACUQ,mBAAS,IADnB,mBACnBC,EADmB,KACPC,EADO,KAc1B,OACE,0BAAMP,GAAG,iBAAiBQ,SARP,SAACC,GACpBA,EAAMC,iBAENb,EAAMc,aAAaL,GACnBC,EAAc,MAKZ,2BAAOP,GAAG,gBAAgBY,MAAON,EAAYO,SAbrB,SAACJ,GAC3BF,EAAcE,EAAMK,OAAOF,UAazB,4BAAQZ,GAAG,eAAX,UAKAe,EAAkB,SAAClB,GAAW,IAC1BmB,EAAanB,EAAbmB,SAER,OACE,yBAAKhB,GAAG,qBAEJgB,EAASC,KAAI,SAAAC,GACX,MAAqB,SAAjBA,EAAQC,KACH,kBAAC,EAAD,CAAapB,IAAKmB,EAAQlB,GAAIE,KAAMgB,EAAQhB,OAE5C,kBAAC,EAAD,CAAaH,IAAKmB,EAAQlB,GAAIC,KAAMiB,EAAQjB,KAAMC,KAAMgB,EAAQhB,YC5C/EF,EAAK,EACLC,EAAOmB,OAAO,4BACd,QAAQC,KAAKpB,KAAOA,EAAO,aAE/B,IA2CeqB,EA3CH,SAACzB,GAAW,IACd0B,EAAO1B,EAAP0B,GADa,EAGWlB,mBAAS,IAHpB,mBAGdW,EAHc,KAGJQ,EAHI,KAKfC,EAAcC,mBACpBD,EAAYE,QAAUX,EAGtB,IAAMY,EAAgB,SAACT,EAAMlB,EAAMC,GAEjC,IAAMI,EAAa,CACjBa,KAAMA,EACNlB,KAAMA,EACNC,KAAMA,EACNF,KALFA,GAOAwB,EAAY,GAAD,mBAAKC,EAAYE,SAAjB,CAA0BrB,MAiBvC,OAFAuB,qBAZc,WACZN,EAAGO,KAAK,WAAY7B,GACpB2B,EAAc,OAAQ,GAAT,UAAgB3B,EAAhB,iBACbsB,EAAGQ,GAAG,kBAAkB,SAAA9B,GAAI,OAAI2B,EAAc,OAAQ,GAAT,UAAgB3B,EAAhB,uBAC7CsB,EAAGQ,GAAG,gBAAgB,SAAAC,GAAI,OAAIJ,EAAc,UAAWI,EAAK/B,KAAM+B,EAAKd,cAQxD,IAGf,oCACE,yBAAKlB,GAAG,UAAS,yCACjB,kBAAC,EAAD,CAAiBgB,SAAUA,IAC3B,kBAAC,EAAD,CAAUL,aAXQ,SAACO,GACrBU,EAAc,UAAW3B,EAAMiB,GAC/BK,EAAGO,KAAK,oBAAqBZ,Q,QClC3BK,E,MAAKU,GADM,KAGjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKb,GAAIA,KAEXc,SAASC,eAAe,W","file":"static/js/main.3d822615.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ChatMessage = (props) => {\r\n  return (\r\n    <div className='chat-message' key={props.id}>\r\n      <p className='chat-message-name'>{`${props.name}:`}</p>\r\n      <p className='chat-message-text'>{`\\xa0${props.text}`}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst InfoMessage = (props) => {\r\n  return (\r\n    <div className='info-message'>\r\n      <p>{props.text}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SendForm = (props) => {\r\n  const [newMessage, setNewMessage] = useState('');\r\n  \r\n  const handleMessageChange = (event) => {\r\n    setNewMessage(event.target.value);\r\n  }\r\n  \r\n  const submitAction = (event) => {\r\n    event.preventDefault();\r\n    // if (/^\\s*$/.test(newMessage)) return;\r\n    props.submitAction(newMessage);\r\n    setNewMessage('');\r\n  }\r\n  \r\n  return (\r\n    <form id=\"send-container\" onSubmit={submitAction}>\r\n      <input id='message-input' value={newMessage} onChange={handleMessageChange} />\r\n      <button id='send-button'>Send</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst ChatMessageList = (props) => {\r\n  const { messages } = props;\r\n  \r\n  return (\r\n    <div id=\"message-container\">\r\n      {\r\n        messages.map(message => {\r\n          if (message.type === 'info') {\r\n            return <InfoMessage key={message.id} text={message.text} />\r\n          } else {\r\n            return <ChatMessage key={message.id} name={message.name} text={message.text} />\r\n          }\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { ChatMessageList };\r\nexport { SendForm };","import React, { useState, useEffect, useRef } from \"react\";\nimport './App.css';\nimport {\n  ChatMessageList,\n  SendForm\n} from './components/ChatMessage.js';\n\nlet id = 0;\nlet name = prompt('Please enter your name: ');\nif (/^\\s*$/.test(name)) name = 'Anonymous';\n\nconst App = (props) => {\n  const { io } = props;\n  \n  const [messages, setMessages] = useState([]);\n  \n  const messagesRef = useRef();\n  messagesRef.current = messages;\n  \n  // Add a new message handle.\n  const addNewMessage = (type, name, text) => {\n    id++;\n    const newMessage = {\n      type: type,\n      name: name,\n      text: text,\n      id: id\n    };\n    setMessages([...messagesRef.current, newMessage]);\n  };\n  \n  const setIO = () => {\n    io.emit('new-user', name);\n    addNewMessage('info', '', `${name} has joined.`);\n    io.on('user-connected', name => addNewMessage('info', '', `${name} has connected.`));\n    io.on('chat-message', data => addNewMessage('message', data.name, data.message));\n  }\n  \n  const onSendMessage = (message) => {\n    addNewMessage('message', name, message);\n    io.emit('send-chat-message', message);\n  }\n  \n  useEffect(setIO, []);\n  \n  return (\n    <>\n      <div id='header'><h2>Chat App</h2></div>\n      <ChatMessageList messages={messages} />\n      <SendForm submitAction={onSendMessage} />\n    </>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport socketIO from 'socket.io-client';\n\nconst ENDPOINT = '/';\nconst io = socketIO(ENDPOINT);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App io={io} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}
{"version":3,"sources":["components/ChatMessage.js","App.js","index.js"],"names":["ChatMessage","props","className","key","id","name","text","InfoMessage","SendForm","useState","newMessage","setNewMessage","messageInput","createRef","useEffect","current","focus","onSubmit","event","preventDefault","submitAction","ref","value","onChange","target","autocomplete","spellcheck","ChatMessageList","messages","map","message","type","prompt","test","App","io","setMessages","messagesRef","useRef","addNewMessage","emit","on","data","socketIO","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAEMA,G,MAAc,SAACC,GACnB,OACE,yBAAKC,UAAU,eAAeC,IAAKF,EAAMG,IACvC,uBAAGF,UAAU,qBAAb,UAAqCD,EAAMI,KAA3C,MACA,uBAAGH,UAAU,qBAAb,cAAyCD,EAAMK,UAK/CC,EAAc,SAACN,GACnB,OACE,yBAAKC,UAAU,gBACb,2BAAID,EAAMK,QAKVE,EAAW,SAACP,GAAW,IAAD,EACUQ,mBAAS,IADnB,mBACnBC,EADmB,KACPC,EADO,KAEpBC,EAAeC,sBAErBC,qBAAU,WACRF,EAAaG,QAAQC,UACpB,CAACJ,IAaJ,OACE,0BAAMR,GAAG,iBAAiBa,SARP,SAACC,GACpBA,EAAMC,iBAENlB,EAAMmB,aAAaV,GACnBC,EAAc,MAKZ,gCACA,2BAAOP,GAAG,gBACRiB,IAAKT,EACLU,MAAOZ,EACPa,SAjBsB,SAACL,GAC3BP,EAAcO,EAAMM,OAAOF,QAiBvBG,aAAa,QACbC,WAAW,UAEb,4BAAQtB,GAAG,eAAX,UAKAuB,EAAkB,SAAC1B,GAAW,IAC1B2B,EAAa3B,EAAb2B,SAER,OACE,yBAAKxB,GAAG,qBAEJwB,EAASC,KAAI,SAAAC,GACX,MAAqB,SAAjBA,EAAQC,KACH,kBAAC,EAAD,CAAa5B,IAAK2B,EAAQ1B,GAAIE,KAAMwB,EAAQxB,OAE5C,kBAAC,EAAD,CAAaH,IAAK2B,EAAQ1B,GAAIC,KAAMyB,EAAQzB,KAAMC,KAAMwB,EAAQxB,YCpD/EF,EAAK,EACLC,EAAO2B,OAAO,4BACd,QAAQC,KAAK5B,KAAOA,EAAO,aAE/B,IA0Ce6B,EA1CH,SAACjC,GAAW,IACdkC,EAAOlC,EAAPkC,GADa,EAEW1B,mBAAS,IAFpB,mBAEdmB,EAFc,KAEJQ,EAFI,KAIfC,EAAcC,mBACpBD,EAAYtB,QAAUa,EAGtB,IAAMW,EAAgB,SAACR,EAAM1B,EAAMC,GAEjC,IAAMI,EAAa,CACjBqB,KAAMA,EACN1B,KAAMA,EACNC,KAAMA,EACNF,KALFA,GAOAgC,EAAY,GAAD,mBAAKC,EAAYtB,SAAjB,CAA0BL,MAiBvC,OAFAI,qBAZc,WACZqB,EAAGK,KAAK,WAAYnC,GACpBkC,EAAc,OAAQ,GAAT,UAAgBlC,EAAhB,iBACb8B,EAAGM,GAAG,kBAAkB,SAAApC,GAAI,OAAIkC,EAAc,OAAQ,GAAT,UAAgBlC,EAAhB,uBAC7C8B,EAAGM,GAAG,gBAAgB,SAAAC,GAAI,OAAIH,EAAc,UAAWG,EAAKrC,KAAMqC,EAAKZ,cAQxD,IAGf,oCACE,yBAAK1B,GAAG,UAAS,yCACjB,kBAAC,EAAD,CAAiBwB,SAAUA,IAC3B,kBAAC,EAAD,CAAUR,aAXQ,SAACU,GACrBS,EAAc,UAAWlC,EAAMyB,GAC/BK,EAAGK,KAAK,oBAAqBV,Q,QCrC3BK,E,MAAKQ,GADM,yBAGjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKX,GAAIA,KAEXY,SAASC,eAAe,W","file":"static/js/main.22776e4f.chunk.js","sourcesContent":["import React, { useState, useEffect, createRef } from 'react';\r\n\r\nconst ChatMessage = (props) => {\r\n  return (\r\n    <div className='chat-message' key={props.id}>\r\n      <p className='chat-message-name'>{`${props.name}:`}</p>\r\n      <p className='chat-message-text'>{`\\xa0${props.text}`}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst InfoMessage = (props) => {\r\n  return (\r\n    <div className='info-message'>\r\n      <p>{props.text}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SendForm = (props) => {\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const messageInput = createRef();\r\n  \r\n  useEffect(() => {\r\n    messageInput.current.focus();\r\n  }, [messageInput]);\r\n  \r\n  const handleMessageChange = (event) => {\r\n    setNewMessage(event.target.value);\r\n  }\r\n  \r\n  const submitAction = (event) => {\r\n    event.preventDefault();\r\n    // if (/^\\s*$/.test(newMessage)) return;\r\n    props.submitAction(newMessage);\r\n    setNewMessage('');\r\n  }\r\n  \r\n  return (\r\n    <form id=\"send-container\" onSubmit={submitAction}>\r\n      <p>$</p>\r\n      <input id='message-input'\r\n        ref={messageInput}\r\n        value={newMessage}\r\n        onChange={handleMessageChange}\r\n        autocomplete=\"false\"\r\n        spellcheck=\"false\"\r\n      />\r\n      <button id='send-button'>Send</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst ChatMessageList = (props) => {\r\n  const { messages } = props;\r\n  \r\n  return (\r\n    <div id=\"message-container\">\r\n      {\r\n        messages.map(message => {\r\n          if (message.type === 'info') {\r\n            return <InfoMessage key={message.id} text={message.text} />\r\n          } else {\r\n            return <ChatMessage key={message.id} name={message.name} text={message.text} />\r\n          }\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { ChatMessageList };\r\nexport { SendForm };","import React, {\n  useState,\n  useEffect,\n  useRef,\n} from \"react\";\nimport './App.css';\nimport {\n  ChatMessageList,\n  SendForm\n} from './components/ChatMessage.js';\n\nlet id = 0;\nlet name = prompt('Please enter your name: ');\nif (/^\\s*$/.test(name)) name = 'Anonymous';\n\nconst App = (props) => {\n  const { io } = props;\n  const [messages, setMessages] = useState([]);\n  \n  const messagesRef = useRef();\n  messagesRef.current = messages;\n  \n  // Add a new message handle.\n  const addNewMessage = (type, name, text) => {\n    id++;\n    const newMessage = {\n      type: type,\n      name: name,\n      text: text,\n      id: id\n    };\n    setMessages([...messagesRef.current, newMessage]);\n  };\n  \n  const setIO = () => {\n    io.emit('new-user', name);\n    addNewMessage('info', '', `${name} has joined.`);\n    io.on('user-connected', name => addNewMessage('info', '', `${name} has connected.`));\n    io.on('chat-message', data => addNewMessage('message', data.name, data.message));\n  }\n  \n  const onSendMessage = (message) => {\n    addNewMessage('message', name, message);\n    io.emit('send-chat-message', message);\n  }\n  \n  useEffect(setIO, []);\n  \n  return (\n    <>\n      <div id='header'><h2>Chat App</h2></div>\n      <ChatMessageList messages={messages} />\n      <SendForm submitAction={onSendMessage} />\n    </>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport socketIO from 'socket.io-client';\n\nconst ENDPOINT = 'http://localhost:5000';\nconst io = socketIO(ENDPOINT);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App io={io} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}